{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"id\",\"initialRouteName\",\"defaultStatus\",\"backBehavior\",\"children\",\"screenListeners\",\"screenOptions\"],_excluded2=[\"openByDefault\",\"lazy\",\"drawerContentOptions\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{createNavigatorFactory,DrawerRouter,useNavigationBuilder}from'@react-navigation/native';import*as React from'react';import warnOnce from'warn-once';import DrawerView from\"../views/DrawerView\";function DrawerNavigator(_ref){var id=_ref.id,initialRouteName=_ref.initialRouteName,customDefaultStatus=_ref.defaultStatus,backBehavior=_ref.backBehavior,children=_ref.children,screenListeners=_ref.screenListeners,screenOptions=_ref.screenOptions,restWithDeprecated=_objectWithoutProperties(_ref,_excluded);var openByDefault=restWithDeprecated.openByDefault,lazy=restWithDeprecated.lazy,drawerContentOptions=restWithDeprecated.drawerContentOptions,rest=_objectWithoutProperties(restWithDeprecated,_excluded2);var defaultScreenOptions={};if(drawerContentOptions){Object.assign(defaultScreenOptions,{drawerPosition:drawerContentOptions.drawerPosition,drawerType:drawerContentOptions.drawerType,swipeEdgeWidth:drawerContentOptions.edgeWidth,drawerHideStatusBarOnOpen:drawerContentOptions.hideStatusBar,keyboardDismissMode:drawerContentOptions.keyboardDismissMode,swipeMinDistance:drawerContentOptions.minSwipeDistance,overlayColor:drawerContentOptions.overlayColor,drawerStatusBarAnimation:drawerContentOptions.statusBarAnimation,gestureHandlerProps:drawerContentOptions.gestureHandlerProps});Object.keys(defaultScreenOptions).forEach(function(key){if(defaultScreenOptions[key]===undefined){delete defaultScreenOptions[key];}});warnOnce(drawerContentOptions,\"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\"+JSON.stringify(defaultScreenOptions,null,2)+\"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");}if(typeof lazy==='boolean'){defaultScreenOptions.lazy=lazy;warnOnce(true,\"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");}if(typeof openByDefault==='boolean'){warnOnce(true,\"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");}var defaultStatus=customDefaultStatus!==undefined?customDefaultStatus:openByDefault?'open':'closed';var _useNavigationBuilder=useNavigationBuilder(DrawerRouter,{id:id,initialRouteName:initialRouteName,defaultStatus:defaultStatus,backBehavior:backBehavior,children:children,screenListeners:screenListeners,screenOptions:screenOptions,defaultScreenOptions:defaultScreenOptions}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation,NavigationContent=_useNavigationBuilder.NavigationContent;return React.createElement(NavigationContent,null,React.createElement(DrawerView,_extends({},rest,{defaultStatus:defaultStatus,state:state,descriptors:descriptors,navigation:navigation})));}export default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"mappings":"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","names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","id","_ref","initialRouteName","customDefaultStatus","defaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","openByDefault","lazy","drawerContentOptions","rest","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent"],"sources":["createDrawerNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  id,\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      id,\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import{Direction}from\"./web/constants\";import FlingGestureHandler from\"./web/FlingGestureHandler\";import LongPressGestureHandler from\"./web/LongPressGestureHandler\";import NativeViewGestureHandler from\"./web/NativeViewGestureHandler\";import*as NodeManager from\"./web/NodeManager\";import PanGestureHandler from\"./web/PanGestureHandler\";import PinchGestureHandler from\"./web/PinchGestureHandler\";import RotationGestureHandler from\"./web/RotationGestureHandler\";import TapGestureHandler from\"./web/TapGestureHandler\";export var Gestures={PanGestureHandler:PanGestureHandler,RotationGestureHandler:RotationGestureHandler,PinchGestureHandler:PinchGestureHandler,TapGestureHandler:TapGestureHandler,NativeViewGestureHandler:NativeViewGestureHandler,LongPressGestureHandler:LongPressGestureHandler,FlingGestureHandler:FlingGestureHandler};export default{Direction:Direction,handleSetJSResponder:function handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder:function handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler:function createGestureHandler(handlerName,handlerTag,config){if(!(handlerName in Gestures))throw new Error(\"react-native-gesture-handler: \"+handlerName+\" is not supported on web.\");var GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass());this.updateGestureHandler(handlerTag,config);},attachGestureHandler:function attachGestureHandler(handlerTag,newView,_actionType,propsRef){NodeManager.getHandler(handlerTag).setView(newView,propsRef);},updateGestureHandler:function updateGestureHandler(handlerTag,newConfig){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);},getGestureHandlerNode:function getGestureHandlerNode(handlerTag){return NodeManager.getHandler(handlerTag);},dropGestureHandler:function dropGestureHandler(handlerTag){NodeManager.dropGestureHandler(handlerTag);},flushOperations:function flushOperations(){}};","map":{"version":3,"mappings":"AACA,OAASA,SAAT,uBACA,MAAOC,oBAAP,iCACA,MAAOC,wBAAP,qCACA,MAAOC,yBAAP,sCACA,MAAO,GAAKC,YAAZ,yBACA,MAAOC,kBAAP,+BACA,MAAOC,oBAAP,iCACA,MAAOC,uBAAP,oCACA,MAAOC,kBAAP,+BAEA,MAAO,IAAMC,SAAQ,CAAG,CACtBJ,iBADsB,CACtBA,iBADsB,CAEtBE,sBAFsB,CAEtBA,sBAFsB,CAGtBD,mBAHsB,CAGtBA,mBAHsB,CAItBE,iBAJsB,CAItBA,iBAJsB,CAKtBL,wBALsB,CAKtBA,wBALsB,CAMtBD,uBANsB,CAMtBA,uBANsB,CAOtBD,mBAPsB,CAOtBA,mBAPsB,CAAjB,CAWP,cAAe,CACbD,SADa,CACbA,SADa,CAEbU,oBAAoB,+BAACC,GAAD,CAAcC,oBAAd,CAA6C,CAC/DC,OAAO,CAACC,IAAR,CAAa,wBAAb,CAAuCH,GAAvC,CAA4CC,oBAA5C,EACD,CAJY,CAKbG,sBAAsB,kCAAG,CACvBF,OAAO,CAACC,IAAR,CAAa,0BAAb,EACD,CAPY,CAQbE,oBAAoB,+BAClBC,WADkB,CAElBC,UAFkB,CAGlBC,MAHkB,CAIlB,CAEA,GAAI,EAAEF,WAAW,GAAIR,SAAjB,CAAJ,CACE,KAAM,IAAIW,MAAJ,kCAC6BH,WAAY,6BAD/C,CAGF,GAAMI,aAAY,CAAGZ,QAAQ,CAACQ,WAAD,CAA7B,CACAb,WAAW,CAACY,oBAAZ,CAAiCE,UAAjC,CAA6C,GAAIG,aAAJ,EAA7C,EACA,KAAKC,oBAAL,CAA0BJ,UAA1B,CAAsCC,MAAtC,EACD,CArBY,CAsBbI,oBAAoB,+BAClBL,UADkB,CAElBM,OAFkB,CAGlBC,WAHkB,CAIlBC,QAJkB,CAKlB,CACAtB,WAAW,CAACuB,UAAZ,CAAuBT,UAAvB,EAAmCU,OAAnC,CAA2CJ,OAA3C,CAAoDE,QAApD,EACD,CA7BY,CA8BbJ,oBAAoB,+BAACJ,UAAD,CAAqBW,SAArB,CAAqC,CACvDzB,WAAW,CAACuB,UAAZ,CAAuBT,UAAvB,EAAmCY,mBAAnC,CAAuDD,SAAvD,EACD,CAhCY,CAiCbE,qBAAqB,gCAACb,UAAD,CAAqB,CACxC,MAAOd,YAAW,CAACuB,UAAZ,CAAuBT,UAAvB,CAAP,CACD,CAnCY,CAoCbc,kBAAkB,6BAACd,UAAD,CAAqB,CACrCd,WAAW,CAAC4B,kBAAZ,CAA+Bd,UAA/B,EACD,CAtCY,CAwCbe,eAAe,2BAAG,CAAE,CAxCP,CAAf","names":["Direction","FlingGestureHandler","LongPressGestureHandler","NativeViewGestureHandler","NodeManager","PanGestureHandler","PinchGestureHandler","RotationGestureHandler","TapGestureHandler","Gestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["RNGestureHandlerModule.web.ts"],"sourcesContent":["import { ActionType } from './ActionType';\nimport { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}
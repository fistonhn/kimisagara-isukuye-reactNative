{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var _excluded=[\"navigation\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{getHeaderTitle,Header,SafeAreaProviderCompat,Screen}from'@react-navigation/elements';import{DrawerActions,useTheme}from'@react-navigation/native';import*as React from'react';import BackHandler from\"react-native-web/dist/exports/BackHandler\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import*as Reanimated from'react-native-reanimated';import{useSafeAreaFrame}from'react-native-safe-area-context';import DrawerPositionContext from\"../utils/DrawerPositionContext\";import DrawerStatusContext from\"../utils/DrawerStatusContext\";import getDrawerStatusFromState from\"../utils/getDrawerStatusFromState\";import DrawerContent from\"./DrawerContent\";import DrawerToggleButton from\"./DrawerToggleButton\";import{GestureHandlerRootView}from\"./GestureHandler\";import{MaybeScreen,MaybeScreenContainer}from\"./ScreenFallback\";var getDefaultDrawerWidth=function getDefaultDrawerWidth(_ref){var height=_ref.height,width=_ref.width;var smallerAxisSize=Math.min(height,width);var isLandscape=width>height;var isTablet=smallerAxisSize>=600;var appBarHeight=Platform.OS==='ios'?isLandscape?32:44:56;var maxWidth=isTablet?320:280;return Math.min(smallerAxisSize-appBarHeight,maxWidth);};var GestureHandlerWrapper=GestureHandlerRootView!==null&&GestureHandlerRootView!==void 0?GestureHandlerRootView:View;function DrawerViewBase(_ref2){var _Reanimated$isConfigu;var state=_ref2.state,navigation=_ref2.navigation,descriptors=_ref2.descriptors,defaultStatus=_ref2.defaultStatus,_ref2$drawerContent=_ref2.drawerContent,drawerContent=_ref2$drawerContent===void 0?function(props){return React.createElement(DrawerContent,props);}:_ref2$drawerContent,_ref2$detachInactiveS=_ref2.detachInactiveScreens,detachInactiveScreens=_ref2$detachInactiveS===void 0?Platform.OS==='web'||Platform.OS==='android'||Platform.OS==='ios':_ref2$detachInactiveS,_ref2$useLegacyImplem=_ref2.useLegacyImplementation,useLegacyImplementation=_ref2$useLegacyImplem===void 0?!((_Reanimated$isConfigu=Reanimated.isConfigured)!==null&&_Reanimated$isConfigu!==void 0&&_Reanimated$isConfigu.call(Reanimated)):_ref2$useLegacyImplem;var legacyImplemenationNotAvailable=require('react-native-reanimated').abs===undefined;if(useLegacyImplementation&&legacyImplemenationNotAvailable){throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');}var Drawer=useLegacyImplementation?require(\"./legacy/Drawer\").default:require(\"./modern/Drawer\").default;var focusedRouteKey=state.routes[state.index].key;var _descriptors$focusedR=descriptors[focusedRouteKey].options,_descriptors$focusedR2=_descriptors$focusedR.drawerHideStatusBarOnOpen,drawerHideStatusBarOnOpen=_descriptors$focusedR2===void 0?false:_descriptors$focusedR2,_descriptors$focusedR3=_descriptors$focusedR.drawerPosition,drawerPosition=_descriptors$focusedR3===void 0?I18nManager.getConstants().isRTL?'right':'left':_descriptors$focusedR3,_descriptors$focusedR4=_descriptors$focusedR.drawerStatusBarAnimation,drawerStatusBarAnimation=_descriptors$focusedR4===void 0?'slide':_descriptors$focusedR4,drawerStyle=_descriptors$focusedR.drawerStyle,_descriptors$focusedR5=_descriptors$focusedR.drawerType,drawerType=_descriptors$focusedR5===void 0?Platform.select({ios:'slide',default:'front'}):_descriptors$focusedR5,gestureHandlerProps=_descriptors$focusedR.gestureHandlerProps,_descriptors$focusedR6=_descriptors$focusedR.keyboardDismissMode,keyboardDismissMode=_descriptors$focusedR6===void 0?'on-drag':_descriptors$focusedR6,_descriptors$focusedR7=_descriptors$focusedR.overlayColor,overlayColor=_descriptors$focusedR7===void 0?'rgba(0, 0, 0, 0.5)':_descriptors$focusedR7,_descriptors$focusedR8=_descriptors$focusedR.swipeEdgeWidth,swipeEdgeWidth=_descriptors$focusedR8===void 0?32:_descriptors$focusedR8,_descriptors$focusedR9=_descriptors$focusedR.swipeEnabled,swipeEnabled=_descriptors$focusedR9===void 0?Platform.OS!=='web'&&Platform.OS!=='windows'&&Platform.OS!=='macos':_descriptors$focusedR9,_descriptors$focusedR10=_descriptors$focusedR.swipeMinDistance,swipeMinDistance=_descriptors$focusedR10===void 0?60:_descriptors$focusedR10;var _React$useState=React.useState([focusedRouteKey]),_React$useState2=_slicedToArray(_React$useState,2),loaded=_React$useState2[0],setLoaded=_React$useState2[1];if(!loaded.includes(focusedRouteKey)){setLoaded([].concat(_toConsumableArray(loaded),[focusedRouteKey]));}var dimensions=useSafeAreaFrame();var _useTheme=useTheme(),colors=_useTheme.colors;var drawerStatus=getDrawerStatusFromState(state);var handleDrawerOpen=React.useCallback(function(){navigation.dispatch(_objectSpread(_objectSpread({},DrawerActions.openDrawer()),{},{target:state.key}));},[navigation,state.key]);var handleDrawerClose=React.useCallback(function(){navigation.dispatch(_objectSpread(_objectSpread({},DrawerActions.closeDrawer()),{},{target:state.key}));},[navigation,state.key]);React.useEffect(function(){if(drawerStatus===defaultStatus||drawerType==='permanent'){return;}var handleHardwareBack=function handleHardwareBack(){if(!navigation.isFocused()){return false;}if(defaultStatus==='open'){handleDrawerOpen();}else{handleDrawerClose();}return true;};var handleEscape=function handleEscape(e){if(e.key==='Escape'){handleHardwareBack();}};var subscription=BackHandler.addEventListener('hardwareBackPress',handleHardwareBack);if(Platform.OS==='web'){var _document,_document$body,_document$body$addEve;(_document=document)===null||_document===void 0?void 0:(_document$body=_document.body)===null||_document$body===void 0?void 0:(_document$body$addEve=_document$body.addEventListener)===null||_document$body$addEve===void 0?void 0:_document$body$addEve.call(_document$body,'keyup',handleEscape);}return function(){subscription.remove();if(Platform.OS==='web'){var _document2,_document2$body,_document2$body$remov;(_document2=document)===null||_document2===void 0?void 0:(_document2$body=_document2.body)===null||_document2$body===void 0?void 0:(_document2$body$remov=_document2$body.removeEventListener)===null||_document2$body$remov===void 0?void 0:_document2$body$remov.call(_document2$body,'keyup',handleEscape);}};},[defaultStatus,drawerStatus,drawerType,handleDrawerClose,handleDrawerOpen,navigation]);var renderDrawerContent=function renderDrawerContent(){return React.createElement(DrawerPositionContext.Provider,{value:drawerPosition},drawerContent({state:state,navigation:navigation,descriptors:descriptors}));};var renderSceneContent=function renderSceneContent(){return React.createElement(MaybeScreenContainer,{enabled:detachInactiveScreens,hasTwoStates:true,style:styles.content},state.routes.map(function(route,index){var descriptor=descriptors[route.key];var _descriptor$options=descriptor.options,_descriptor$options$l=_descriptor$options.lazy,lazy=_descriptor$options$l===void 0?true:_descriptor$options$l,unmountOnBlur=_descriptor$options.unmountOnBlur;var isFocused=state.index===index;if(unmountOnBlur&&!isFocused){return null;}if(lazy&&!loaded.includes(route.key)&&!isFocused){return null;}var _descriptor$options2=descriptor.options,freezeOnBlur=_descriptor$options2.freezeOnBlur,_descriptor$options2$=_descriptor$options2.header,header=_descriptor$options2$===void 0?function(_ref3){var _options$headerLeft;var layout=_ref3.layout,options=_ref3.options;return React.createElement(Header,_extends({},options,{layout:layout,title:getHeaderTitle(options,route.name),headerLeft:(_options$headerLeft=options.headerLeft)!==null&&_options$headerLeft!==void 0?_options$headerLeft:function(props){return React.createElement(DrawerToggleButton,props);}}));}:_descriptor$options2$,headerShown=_descriptor$options2.headerShown,headerStatusBarHeight=_descriptor$options2.headerStatusBarHeight,headerTransparent=_descriptor$options2.headerTransparent,sceneContainerStyle=_descriptor$options2.sceneContainerStyle;return React.createElement(MaybeScreen,{key:route.key,style:[StyleSheet.absoluteFill,{zIndex:isFocused?0:-1}],visible:isFocused,enabled:detachInactiveScreens,freezeOnBlur:freezeOnBlur},React.createElement(Screen,{focused:isFocused,route:descriptor.route,navigation:descriptor.navigation,headerShown:headerShown,headerStatusBarHeight:headerStatusBarHeight,headerTransparent:headerTransparent,header:header({layout:dimensions,route:descriptor.route,navigation:descriptor.navigation,options:descriptor.options}),style:sceneContainerStyle},descriptor.render()));}));};return React.createElement(DrawerStatusContext.Provider,{value:drawerStatus},React.createElement(Drawer,{open:drawerStatus!=='closed',onOpen:handleDrawerOpen,onClose:handleDrawerClose,gestureHandlerProps:gestureHandlerProps,swipeEnabled:swipeEnabled,swipeEdgeWidth:swipeEdgeWidth,swipeVelocityThreshold:500,swipeDistanceThreshold:swipeMinDistance,hideStatusBarOnOpen:drawerHideStatusBarOnOpen,statusBarAnimation:drawerStatusBarAnimation,keyboardDismissMode:keyboardDismissMode,drawerType:drawerType,drawerPosition:drawerPosition,drawerStyle:[{width:getDefaultDrawerWidth(dimensions),backgroundColor:colors.card},drawerType==='permanent'&&(drawerPosition==='left'?{borderRightColor:colors.border,borderRightWidth:StyleSheet.hairlineWidth}:{borderLeftColor:colors.border,borderLeftWidth:StyleSheet.hairlineWidth}),drawerStyle],overlayStyle:{backgroundColor:overlayColor},renderDrawerContent:renderDrawerContent,renderSceneContent:renderSceneContent,dimensions:dimensions}));}export default function DrawerView(_ref4){var navigation=_ref4.navigation,rest=_objectWithoutProperties(_ref4,_excluded);return React.createElement(SafeAreaProviderCompat,null,React.createElement(GestureHandlerWrapper,{style:styles.content},React.createElement(DrawerViewBase,_extends({navigation:navigation},rest))));}var styles=StyleSheet.create({content:{flex:1}});","map":{"version":3,"mappings":"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","names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerViewBase","state","_ref2","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","isConfigured","_Reanimated$isConfigu","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","options","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","getConstants","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","useState","loaded","setLoaded","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","renderDrawerContent","Provider","value","renderSceneContent","enabled","hasTwoStates","style","styles","content","map","route","descriptor","lazy","unmountOnBlur","freezeOnBlur","header","layout","_ref3","title","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","visible","focused","render","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","_ref4","rest","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable =\n    require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error(\n      'The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.'\n    );\n  }\n\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            freezeOnBlur,\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            headerShown,\n            headerStatusBarHeight,\n            headerTransparent,\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n              freezeOnBlur={freezeOnBlur}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={headerShown}\n                headerStatusBarHeight={headerStatusBarHeight}\n                headerTransparent={headerTransparent}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
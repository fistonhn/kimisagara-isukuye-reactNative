{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var _excluded=[\"enabled\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import Hammer from'@egjs/hammerjs';import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import{State}from\"../State\";import{EventMap}from\"./constants\";import*as NodeManager from\"./NodeManager\";var gestureInstances=0;var GestureHandler=function(){function GestureHandler(){var _this=this;_classCallCheck(this,GestureHandler);_defineProperty(this,\"handlerTag\",void 0);_defineProperty(this,\"isGestureRunning\",false);_defineProperty(this,\"view\",null);_defineProperty(this,\"hasCustomActivationCriteria\",void 0);_defineProperty(this,\"hasGestureFailed\",false);_defineProperty(this,\"hammer\",null);_defineProperty(this,\"initialRotation\",null);_defineProperty(this,\"__initialX\",void 0);_defineProperty(this,\"__initialY\",void 0);_defineProperty(this,\"config\",{});_defineProperty(this,\"previousState\",State.UNDETERMINED);_defineProperty(this,\"pendingGestures\",{});_defineProperty(this,\"oldState\",State.UNDETERMINED);_defineProperty(this,\"lastSentState\",null);_defineProperty(this,\"gestureInstance\",void 0);_defineProperty(this,\"_stillWaiting\",void 0);_defineProperty(this,\"propsRef\",void 0);_defineProperty(this,\"ref\",void 0);_defineProperty(this,\"clearSelfAsPending\",function(){if(Array.isArray(_this.config.waitFor)){for(var gesture of _this.config.waitFor){gesture.removePendingGesture(_this.id);}}});_defineProperty(this,\"destroy\",function(){_this.clearSelfAsPending();if(_this.hammer){_this.hammer.stop(false);_this.hammer.destroy();}_this.hammer=null;});_defineProperty(this,\"isPointInView\",function(_ref){var x=_ref.x,y=_ref.y;var rect=_this.view.getBoundingClientRect();var pointerInside=x>=rect.left&&x<=rect.right&&y>=rect.top&&y<=rect.bottom;return pointerInside;});_defineProperty(this,\"sendEvent\",function(nativeEvent){var _this$propsRef$curren=_this.propsRef.current,onGestureHandlerEvent=_this$propsRef$curren.onGestureHandlerEvent,onGestureHandlerStateChange=_this$propsRef$curren.onGestureHandlerStateChange;var event=_this.transformEventData(nativeEvent);invokeNullableMethod(onGestureHandlerEvent,event);if(_this.lastSentState!==event.nativeEvent.state){_this.lastSentState=event.nativeEvent.state;invokeNullableMethod(onGestureHandlerStateChange,event);}});_defineProperty(this,\"sync\",function(){var gesture=_this.hammer.get(_this.name);if(!gesture)return;var enable=function enable(recognizer,inputData){if(!_this.config.enabled){_this.isGestureRunning=false;_this.hasGestureFailed=false;return false;}if(!inputData||!recognizer.options||typeof inputData.maxPointers==='undefined'){return _this.shouldEnableGestureOnSetup;}if(_this.hasGestureFailed){return false;}if(!_this.isDiscrete){if(_this.isGestureRunning){return true;}_this._stillWaiting=_this._getPendingGestures();if(_this._stillWaiting.length){for(var _gesture2 of _this._stillWaiting){if(!_gesture2.isDiscrete&&_gesture2.isGestureRunning){_this.hasGestureFailed=true;_this.isGestureRunning=false;return false;}}return false;}}if(!_this.hasCustomActivationCriteria){return true;}var deltaRotation=_this.initialRotation==null?0:inputData.rotation-_this.initialRotation;var _this$isGestureEnable=_this.isGestureEnabledForEvent(_this.getConfig(),recognizer,_objectSpread(_objectSpread({},inputData),{},{deltaRotation:deltaRotation})),success=_this$isGestureEnable.success,failed=_this$isGestureEnable.failed;if(failed){_this.simulateCancelEvent(inputData);_this.hasGestureFailed=true;}return success;};var params=_this.getHammerConfig();gesture.set(_objectSpread(_objectSpread({},params),{},{enable:enable}));});this.gestureInstance=gestureInstances++;this.hasCustomActivationCriteria=false;}_createClass(GestureHandler,[{key:\"id\",get:function get(){return\"\"+this.name+this.gestureInstance;}},{key:\"isDiscrete\",get:function get(){return false;}},{key:\"shouldEnableGestureOnSetup\",get:function get(){throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');}},{key:\"getConfig\",value:function getConfig(){return this.config;}},{key:\"onWaitingEnded\",value:function onWaitingEnded(_gesture){}},{key:\"removePendingGesture\",value:function removePendingGesture(id){delete this.pendingGestures[id];}},{key:\"addPendingGesture\",value:function addPendingGesture(gesture){this.pendingGestures[gesture.id]=gesture;}},{key:\"isGestureEnabledForEvent\",value:function isGestureEnabledForEvent(_config,_recognizer,_event){return{success:true};}},{key:\"NativeGestureClass\",get:function get(){throw new Error('Must override GestureHandler.NativeGestureClass');}},{key:\"updateHasCustomActivationCriteria\",value:function updateHasCustomActivationCriteria(_config){return true;}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref2){var _ref2$enabled=_ref2.enabled,enabled=_ref2$enabled===void 0?true:_ref2$enabled,props=_objectWithoutProperties(_ref2,_excluded);this.clearSelfAsPending();this.config=ensureConfig(_objectSpread({enabled:enabled},props));this.hasCustomActivationCriteria=this.updateHasCustomActivationCriteria(this.config);if(Array.isArray(this.config.waitFor)){for(var gesture of this.config.waitFor){gesture.addPendingGesture(this);}}if(this.hammer){this.sync();}return this.config;}},{key:\"getState\",value:function getState(type){if(type==0){return 0;}return EventMap[type];}},{key:\"transformEventData\",value:function transformEventData(event){var eventType=event.eventType,numberOfPointers=event.maxPointers;var changedTouch=event.changedPointers[0];var pointerInside=this.isPointInView({x:changedTouch.clientX,y:changedTouch.clientY});var state=this.getState(eventType);if(state!==this.previousState){this.oldState=this.previousState;this.previousState=state;}return{nativeEvent:_objectSpread(_objectSpread({numberOfPointers:numberOfPointers,state:state,pointerInside:pointerInside},this.transformNativeEvent(event)),{},{handlerTag:this.handlerTag,target:this.ref,oldState:state!==this.previousState||state!=4?this.oldState:undefined}),timeStamp:Date.now()};}},{key:\"transformNativeEvent\",value:function transformNativeEvent(_event){return{};}},{key:\"cancelPendingGestures\",value:function cancelPendingGestures(event){for(var gesture of Object.values(this.pendingGestures)){if(gesture&&gesture.isGestureRunning){gesture.hasGestureFailed=true;gesture.cancelEvent(event);}}}},{key:\"notifyPendingGestures\",value:function notifyPendingGestures(){for(var gesture of Object.values(this.pendingGestures)){if(gesture){gesture.onWaitingEnded(this);}}}},{key:\"onGestureEnded\",value:function onGestureEnded(event){this.isGestureRunning=false;this.cancelPendingGestures(event);}},{key:\"forceInvalidate\",value:function forceInvalidate(event){if(this.isGestureRunning){this.hasGestureFailed=true;this.cancelEvent(event);}}},{key:\"cancelEvent\",value:function cancelEvent(event){this.notifyPendingGestures();this.sendEvent(_objectSpread(_objectSpread({},event),{},{eventType:Hammer.INPUT_CANCEL,isFinal:true}));this.onGestureEnded(event);}},{key:\"onRawEvent\",value:function onRawEvent(_ref3){var isFirst=_ref3.isFirst;if(isFirst){this.hasGestureFailed=false;}}},{key:\"setView\",value:function setView(ref,propsRef){var _this2=this;if(ref==null){this.destroy();this.view=null;return;}this.propsRef=propsRef;this.ref=ref;this.view=findNodeHandle(ref);this.hammer=new Hammer.Manager(this.view);this.oldState=State.UNDETERMINED;this.previousState=State.UNDETERMINED;this.lastSentState=null;var NativeGestureClass=this.NativeGestureClass;var gesture=new NativeGestureClass(this.getHammerConfig());this.hammer.add(gesture);this.hammer.on('hammer.input',function(ev){if(!_this2.config.enabled){_this2.hasGestureFailed=false;_this2.isGestureRunning=false;return;}_this2.onRawEvent(ev);if(_this2.initialRotation===null&&ev.rotation!==0){_this2.initialRotation=ev.rotation;}if(ev.isFinal){setTimeout(function(){_this2.initialRotation=null;_this2.hasGestureFailed=false;});}});this.setupEvents();this.sync();}},{key:\"setupEvents\",value:function setupEvents(){var _this3=this;if(!this.isDiscrete){this.hammer.on(this.name+\"start\",function(event){return _this3.onStart(event);});this.hammer.on(this.name+\"end \"+this.name+\"cancel\",function(event){_this3.onGestureEnded(event);});}this.hammer.on(this.name,function(ev){return _this3.onGestureActivated(ev);});}},{key:\"onStart\",value:function onStart(_ref4){var deltaX=_ref4.deltaX,deltaY=_ref4.deltaY,rotation=_ref4.rotation;this.oldState=State.UNDETERMINED;this.previousState=State.UNDETERMINED;this.lastSentState=null;this.isGestureRunning=true;this.__initialX=deltaX;this.__initialY=deltaY;this.initialRotation=rotation;}},{key:\"onGestureActivated\",value:function onGestureActivated(ev){this.sendEvent(ev);}},{key:\"onSuccess\",value:function onSuccess(){}},{key:\"_getPendingGestures\",value:function _getPendingGestures(){if(Array.isArray(this.config.waitFor)&&this.config.waitFor.length){var stillWaiting=this.config.waitFor.filter(function(_ref5){var hasGestureFailed=_ref5.hasGestureFailed;return hasGestureFailed===false;});return stillWaiting;}return[];}},{key:\"getHammerConfig\",value:function getHammerConfig(){var pointers=this.config.minPointers===this.config.maxPointers?this.config.minPointers:0;return{pointers:pointers};}},{key:\"simulateCancelEvent\",value:function simulateCancelEvent(_inputData){}}]);return GestureHandler;}();function invokeNullableMethod(method,event){if(method){if(typeof method==='function'){method(event);}else{if('__getHandler'in method&&typeof method.__getHandler==='function'){var handler=method.__getHandler();invokeNullableMethod(handler,event);}else{if('__nodeConfig'in method){var argMapping=method.__nodeConfig.argMapping;if(Array.isArray(argMapping)){for(var _ref6 of argMapping.entries()){var _ref7=_slicedToArray(_ref6,2);var index=_ref7[0];var _ref7$=_slicedToArray(_ref7[1],2);var key=_ref7$[0];var value=_ref7$[1];if(key in event.nativeEvent){var nativeValue=event.nativeEvent[key];if(value&&value.setValue){value.setValue(nativeValue);}else{method.__nodeConfig.argMapping[index]=[key,nativeValue];}}}}}}}}}function ensureConfig(config){var props=_objectSpread({},config);if('minDist'in config){props.minDist=config.minDist;props.minDistSq=props.minDist*props.minDist;}if('minVelocity'in config){props.minVelocity=config.minVelocity;props.minVelocitySq=props.minVelocity*props.minVelocity;}if('maxDist'in config){props.maxDist=config.maxDist;props.maxDistSq=config.maxDist*config.maxDist;}if('waitFor'in config){props.waitFor=asArray(config.waitFor).map(function(_ref8){var handlerTag=_ref8.handlerTag;return NodeManager.getHandler(handlerTag);}).filter(function(v){return v;});}else{props.waitFor=null;}var configProps=['minPointers','maxPointers','minDist','maxDist','maxDistSq','minVelocitySq','minDistSq','minVelocity','failOffsetXStart','failOffsetYStart','failOffsetXEnd','failOffsetYEnd','activeOffsetXStart','activeOffsetXEnd','activeOffsetYStart','activeOffsetYEnd'];configProps.forEach(function(prop){if(typeof props[prop]==='undefined'){props[prop]=Number.NaN;}});return props;}function asArray(value){return value==null?[]:Array.isArray(value)?value:[value];}export default GestureHandler;","map":{"version":3,"mappings":"gzCAEA,MAAOA,OAAP,KAAmB,gBAAnB,0EAGA,OAASC,KAAT,gBACA,OAASC,QAAT,mBACA,MAAO,GAAKC,YAAZ,qBA4BA,GAAIC,iBAAgB,CAAG,CAAvB,IAEeC,eAAf,YAkCEC,yBAAc,uIAhCY,KAgCZ,8BA/Be,IA+Bf,qGA7Be,KA6Bf,gCA5B2B,IA4B3B,yCA3B6B,IA2B7B,oHAxBa,EAwBb,uCAvBmBL,KAAK,CAACM,YAuBzB,yCAtBkC,EAsBlC,kCArBYN,KAAK,CAACM,YAqBlB,uCApBwB,IAoBxB,mNAmCO,UAAM,CACzB,GAAIC,KAAK,CAACC,OAAN,CAAc,MAAKC,MAAL,CAAYC,OAA1B,CAAJ,CAAwC,CACtC,IAAK,GAAMC,QAAX,GAAsB,OAAKF,MAAL,CAAYC,OAAlC,CAA2C,CACzCC,OAAO,CAACC,oBAAR,CAA6B,MAAKC,EAAlC,EACD,CACF,CACF,CAzCa,iCA8DJ,UAAM,CACd,MAAKC,kBAAL,GAEA,GAAI,MAAKC,MAAT,CAAiB,CACf,MAAKA,MAAL,CAAYC,IAAZ,CAAiB,KAAjB,EACA,MAAKD,MAAL,CAAYE,OAAZ,GACD,CACD,MAAKF,MAAL,CAAc,IAAd,CACD,CAtEa,uCAwEE,cAAwC,IAArCG,EAAF,MAAEA,CAAF,CAAKC,SAEpB,GAAMC,KAAI,CAAG,MAAKC,IAAL,CAAWC,qBAAX,EAAb,CACA,GAAMC,cAAa,CACjBL,CAAC,EAAIE,IAAI,CAACI,IAAV,EAAkBN,CAAC,EAAIE,IAAI,CAACK,KAA5B,EAAqCN,CAAC,EAAIC,IAAI,CAACM,GAA/C,EAAsDP,CAAC,EAAIC,IAAI,CAACO,MADlE,CAEA,MAAOJ,cAAP,CACD,CA9Ea,mCAiIDK,oBAAD,CAAiC,CAC3C,0BAGI,MAAKC,QAAL,CAAcC,OAHlB,CACEC,qBADI,uBACJA,qBADI,CAEJC,8EAGF,GAAMC,MAAK,CAAG,MAAKC,kBAAL,CAAwBN,WAAxB,CAAd,CAEAO,oBAAoB,CAACJ,qBAAD,CAAwBE,KAAxB,CAApB,CACA,GAAI,MAAKG,aAAL,GAAuBH,KAAK,CAACL,WAAN,CAAkBS,KAA7C,CAAoD,CAClD,MAAKD,aAAL,CAAqBH,KAAK,CAACL,WAAN,CAAkBS,KAAvC,CACAF,oBAAoB,CAACH,2BAAD,CAA8BC,KAA9B,CAApB,CACD,CACF,CA9Ia,8BAySP,UAAM,CACX,GAAMtB,QAAO,CAAG,MAAKI,MAAL,CAAauB,GAAb,CAAiB,MAAKC,IAAtB,CAAhB,CACA,GAAI,CAAC5B,OAAL,CAAc,OAEd,GAAM6B,OAAM,CAAG,QAATA,OAAM,CAAIC,UAAD,CAAkBC,SAAlB,CAAqC,CAClD,GAAI,CAAC,MAAKjC,MAAL,CAAYkC,OAAjB,CAA0B,CACxB,MAAKC,gBAAL,CAAwB,KAAxB,CACA,MAAKC,gBAAL,CAAwB,KAAxB,CACA,MAAO,MAAP,CACD,CAGD,GACE,CAACH,SAAD,EACA,CAACD,UAAU,CAACK,OADZ,EAEA,MAAOJ,UAAS,CAACK,WAAjB,GAAiC,WAHnC,CAIE,CACA,MAAO,OAAKC,0BAAZ,CACD,CAED,GAAI,MAAKH,gBAAT,CAA2B,CACzB,MAAO,MAAP,CACD,CAED,GAAI,CAAC,MAAKI,UAAV,CAAsB,CACpB,GAAI,MAAKL,gBAAT,CAA2B,CACzB,MAAO,KAAP,CACD,CAGD,MAAKM,aAAL,CAAqB,MAAKC,mBAAL,EAArB,CAEA,GAAI,MAAKD,aAAL,CAAmBE,MAAvB,CAA+B,CAG7B,IAAK,GAAMzC,UAAX,GAAsB,OAAKuC,aAA3B,CAA0C,CAExC,GAAI,CAACvC,SAAO,CAACsC,UAAT,EAAuBtC,SAAO,CAACiC,gBAAnC,CAAqD,CACnD,MAAKC,gBAAL,CAAwB,IAAxB,CACA,MAAKD,gBAAL,CAAwB,KAAxB,CACA,MAAO,MAAP,CACD,CACF,CAED,MAAO,MAAP,CACD,CACF,CAGD,GAAI,CAAC,MAAKS,2BAAV,CAAuC,CACrC,MAAO,KAAP,CACD,CAED,GAAMC,cAAa,CACjB,MAAKC,eAAL,EAAwB,IAAxB,CACI,CADJ,CAEIb,SAAS,CAACc,QAAV,CAAqB,MAAKD,eAHhC,CAKA,0BAA4B,MAAKE,wBAAL,CAC1B,MAAKC,SAAL,EAD0B,CAE1BjB,UAF0B,gCAIrBC,SADL,MAEEY,8BALJ,CAAQK,OAAF,uBAAEA,OAAF,CAAWC,oCASjB,GAAIA,MAAJ,CAAY,CACV,MAAKC,mBAAL,CAAyBnB,SAAzB,EACA,MAAKG,gBAAL,CAAwB,IAAxB,CACD,CACD,MAAOc,QAAP,CACD,CApED,CAsEA,GAAMG,OAAM,CAAG,MAAKC,eAAL,EAAf,CAEApD,OAAO,CAACqD,GAAR,gCAAiBF,MAAL,MAAatB,gBAAzB,CACD,CAtXa,EACZ,KAAKyB,eAAL,CAAuB9D,gBAAgB,EAAvC,CACA,KAAKkD,2BAAL,CAAmC,KAAnC,CACD,4CAfK,cAAG,CACP,SAAU,KAAKd,IAAK,CAAE,KAAK0B,eAAgB,CAC5C,yBAEa,cAAG,CACf,MAAO,MAAP,CACD,yCAE6B,cAAY,CACxC,KAAM,IAAIC,MAAJ,CAAU,yDAAV,CAAN,CACD,0BAODR,oBAAY,CACV,MAAO,MAAKjD,MAAZ,CACD,+BAED0D,wBAAeC,QAAD,CAAiB,CAAE,qCAEjCxD,8BAAqBC,EAAD,CAAa,CAC/B,MAAO,MAAKwD,eAAL,CAAqBxD,EAArB,CAAP,CACD,kCAEDyD,2BAAkB3D,OAAD,CAAgB,CAC/B,KAAK0D,eAAL,CAAqB1D,OAAO,CAACE,EAA7B,EAAmCF,OAAnC,CACD,yCAED8C,kCACEc,OADsB,CAEtBC,WAFsB,CAGtBC,MAHsB,CAImB,CACzC,MAAO,CAAEd,OAAO,CAAE,IAAX,CAAP,CACD,iCAEqB,cAAqB,CACzC,KAAM,IAAIO,MAAJ,CAAU,iDAAV,CAAN,CACD,kDAEDQ,2CAAkCH,OAAD,CAAkB,CACjD,MAAO,KAAP,CACD,oCAUDI,mCAAkD,yBAA5BhC,OAAO,CAAPA,OAAO,wBAAG,IAAZ,eAAqBiC,gDACvC,KAAK9D,kBAAL,GAEA,KAAKL,MAAL,CAAcoE,YAAY,gBAAGlC,OAAF,CAAEA,OAAF,EAAciC,OAAzC,CACA,KAAKvB,2BAAL,CAAmC,KAAKqB,iCAAL,CACjC,KAAKjE,MAD4B,CAAnC,CAGA,GAAIF,KAAK,CAACC,OAAN,CAAc,KAAKC,MAAL,CAAYC,OAA1B,CAAJ,CAAwC,CACtC,IAAK,GAAMC,QAAX,GAAsB,MAAKF,MAAL,CAAYC,OAAlC,CAA2C,CACzCC,OAAO,CAAC2D,iBAAR,CAA0B,IAA1B,EACD,CACF,CAED,GAAI,KAAKvD,MAAT,CAAiB,CACf,KAAK+D,IAAL,GACD,CACD,MAAO,MAAKrE,MAAZ,CACD,yBAoBDsE,kBAASC,IAAD,CAAqC,CAE3C,GAAIA,IAAI,EAAI,CAAZ,CAAe,CACb,MAAO,EAAP,CACD,CACD,MAAO/E,SAAQ,CAAC+E,IAAD,CAAf,CACD,mCAED9C,4BAAmBD,KAAD,CAAwB,CACxC,GAAQgD,UAAF,CAA+ChD,KAArD,CAAQgD,SAAF,CAA0BC,iBAAqBjD,KAArD,CAAmBc,WAAW,CAE9B,GAAMoC,aAAY,CAAGlD,KAAK,CAACmD,eAAN,CAAsB,CAAtB,CAArB,CACA,GAAM7D,cAAa,CAAG,KAAK8D,aAAL,CAAmB,CACvCnE,CAAC,CAAEiE,YAAY,CAACG,OADuB,CAEvCnE,CAAC,CAAEgE,YAAY,CAACI,OAFuB,CAAnB,CAAtB,CAMA,GAAMlD,MAAK,CAAG,KAAK0C,QAAL,CAAcE,SAAd,CAAd,CACA,GAAI5C,KAAK,GAAK,KAAKmD,aAAnB,CAAkC,CAChC,KAAKC,QAAL,CAAgB,KAAKD,aAArB,CACA,KAAKA,aAAL,CAAqBnD,KAArB,CACD,CAED,MAAO,CACLT,WAAW,8BACTsD,gBADW,CACXA,gBADW,CAEX7C,KAFW,CAEXA,KAFW,CAGXd,aAHW,CAGXA,aAHW,EAIR,KAAKmE,oBAAL,CAA0BzD,KAA1B,CAJQ,MAMX0D,UAAU,CAAE,KAAKA,UANN,CAOXC,MAAM,CAAE,KAAKC,GAPF,CAWXJ,QAAQ,CACNpD,KAAK,GAAK,KAAKmD,aAAf,EAAgCnD,KAAK,EAAI,CAAzC,CACI,KAAKoD,QADT,CAEIK,WAfH,CAiBLC,SAAS,CAAEC,IAAI,CAACC,GAAL,EAjBN,CAAP,CAmBD,qCAEDP,8BAAqBjB,MAAD,CAAyB,CAC3C,MAAO,EAAP,CACD,sCAiBDyB,+BAAsBjE,KAAD,CAAwB,CAC3C,IAAK,GAAMtB,QAAX,GAAsBwF,OAAM,CAACC,MAAP,CAAc,KAAK/B,eAAnB,CAAtB,CAA2D,CACzD,GAAI1D,OAAO,EAAIA,OAAO,CAACiC,gBAAvB,CAAyC,CACvCjC,OAAO,CAACkC,gBAAR,CAA2B,IAA3B,CACAlC,OAAO,CAAC0F,WAAR,CAAoBpE,KAApB,EACD,CACF,CACF,sCAEDqE,gCAAwB,CACtB,IAAK,GAAM3F,QAAX,GAAsBwF,OAAM,CAACC,MAAP,CAAc,KAAK/B,eAAnB,CAAtB,CAA2D,CACzD,GAAI1D,OAAJ,CAAa,CACXA,OAAO,CAACwD,cAAR,CAAuB,IAAvB,EACD,CACF,CACF,CAjM2B,8BAoM5BoC,wBAAetE,KAAD,CAAwB,CACpC,KAAKW,gBAAL,CAAwB,KAAxB,CACA,KAAKsD,qBAAL,CAA2BjE,KAA3B,EACD,gCAEDuE,yBAAgBvE,KAAD,CAAwB,CACrC,GAAI,KAAKW,gBAAT,CAA2B,CACzB,KAAKC,gBAAL,CAAwB,IAAxB,CACA,KAAKwD,WAAL,CAAiBpE,KAAjB,EACD,CACF,4BAEDoE,qBAAYpE,KAAD,CAAwB,CACjC,KAAKqE,qBAAL,GACA,KAAKG,SAAL,gCACKxE,KADU,MAEbgD,SAAS,CAAElF,MAAM,CAAC2G,YAFL,CAGbC,OAAO,CAAE,OAHX,CAKA,KAAKJ,cAAL,CAAoBtE,KAApB,EACD,2BAED2E,0BAAwC,IAA3BC,uBACX,GAAIA,OAAJ,CAAa,CACX,KAAKhE,gBAAL,CAAwB,KAAxB,CACD,CACF,wBAEDiE,iBAAQjB,GAAD,CAA8ChE,QAA9C,CAA6D,iBAClE,GAAIgE,GAAG,EAAI,IAAX,CAAiB,CACf,KAAK5E,OAAL,GACA,KAAKI,IAAL,CAAY,IAAZ,CACA,OACD,CAED,KAAKQ,QAAL,CAAgBA,QAAhB,CACA,KAAKgE,GAAL,CAAWA,GAAX,CAEA,KAAKxE,IAAL,CAAY0F,cAAc,CAAClB,GAAD,CAA1B,CACA,KAAK9E,MAAL,CAAc,GAAIhB,OAAM,CAACiH,OAAX,CAAmB,KAAK3F,IAAxB,CAAd,CAEA,KAAKoE,QAAL,CAAgBzF,KAAK,CAACM,YAAtB,CACA,KAAKkF,aAAL,CAAqBxF,KAAK,CAACM,YAA3B,CACA,KAAK8B,aAAL,CAAqB,IAArB,CAEA,GAAQ6E,oBAAuB,IAA/B,CAAQA,mBAER,GAAMtG,QAAO,CAAG,GAAIsG,mBAAJ,CAAuB,KAAKlD,eAAL,EAAvB,CAAhB,CACA,KAAKhD,MAAL,CAAYmG,GAAZ,CAAgBvG,OAAhB,EAEA,KAAKI,MAAL,CAAYoG,EAAZ,CAAe,cAAf,CAAgCC,WAAD,CAAqB,CAClD,GAAI,CAAC,OAAK3G,MAAL,CAAYkC,OAAjB,CAA0B,CACxB,OAAKE,gBAAL,CAAwB,KAAxB,CACA,OAAKD,gBAAL,CAAwB,KAAxB,CACA,OACD,CAED,OAAKgE,UAAL,CAAiBQ,EAAjB,EAIA,GAAI,OAAK7D,eAAL,GAAyB,IAAzB,EAAiC6D,EAAE,CAAC5D,QAAH,GAAgB,CAArD,CAAwD,CACtD,OAAKD,eAAL,CAAuB6D,EAAE,CAAC5D,QAA1B,CACD,CACD,GAAI4D,EAAE,CAACT,OAAP,CAAgB,CAEdU,UAAU,CAAC,UAAM,CACf,OAAK9D,eAAL,CAAuB,IAAvB,CACA,OAAKV,gBAAL,CAAwB,KAAxB,CACD,CAHS,CAAV,CAID,CACF,CArBD,EAuBA,KAAKyE,WAAL,GACA,KAAKxC,IAAL,GACD,4BAEDwC,sBAAc,iBAEZ,GAAI,CAAC,KAAKrE,UAAV,CAAsB,CACpB,KAAKlC,MAAL,CAAaoG,EAAb,CAAmB,KAAK5E,IAAK,SAASN,cAAD,QACnC,QAAKsF,OAAL,CAActF,KAAd,CADF,IAGA,KAAKlB,MAAL,CAAaoG,EAAb,CACK,KAAK5E,IAAK,QAAM,KAAKA,IAAK,UAC5BN,cAAD,CAAwB,CACtB,OAAKsE,cAAL,CAAqBtE,KAArB,EACD,CAJH,EAMD,CACD,KAAKlB,MAAL,CAAaoG,EAAb,CAAgB,KAAK5E,IAArB,CAA4B6E,WAAD,QACzB,QAAKI,kBAAL,CAAyBJ,EAAzB,CADF,IAGD,wBAEDG,uBAAsD,IAA5CE,OAAF,OAAEA,MAAF,CAAUC,MAAV,OAAUA,MAAV,CAAkBlE,wBAExB,KAAKiC,QAAL,CAAgBzF,KAAK,CAACM,YAAtB,CACA,KAAKkF,aAAL,CAAqBxF,KAAK,CAACM,YAA3B,CACA,KAAK8B,aAAL,CAAqB,IAArB,CAEA,KAAKQ,gBAAL,CAAwB,IAAxB,CACA,KAAK+E,UAAL,CAAkBF,MAAlB,CACA,KAAKG,UAAL,CAAkBF,MAAlB,CACA,KAAKnE,eAAL,CAAuBC,QAAvB,CACD,mCAEDgE,4BAAmBJ,EAAD,CAAqB,CACrC,KAAKX,SAAL,CAAeW,EAAf,EACD,0BAEDS,oBAAY,CAAE,oCAEd1E,8BAAsB,CACpB,GAAI5C,KAAK,CAACC,OAAN,CAAc,KAAKC,MAAL,CAAYC,OAA1B,GAAsC,KAAKD,MAAL,CAAYC,OAAZ,CAAoB0C,MAA9D,CAAsE,CAGpE,GAAM0E,aAAY,CAAG,KAAKrH,MAAL,CAAYC,OAAZ,CAAoBqH,MAApB,CACnB,mBAAGlF,+CAAuBA,iBAAgB,GAAK,KAD5B,GAArB,CAGA,MAAOiF,aAAP,CACD,CACD,MAAO,EAAP,CACD,gCAED/D,0BAAkB,CAChB,GAAMiE,SAAQ,CACZ,KAAKvH,MAAL,CAAYwH,WAAZ,GAA4B,KAAKxH,MAAL,CAAYsC,WAAxC,CACI,KAAKtC,MAAL,CAAYwH,WADhB,CAEI,CAHN,CAIA,MAAO,CACLD,iBADK,CAAP,CAGD,oCAiFDnE,6BAAoBqE,UAAD,CAAkB,CAAE,+BAKzC,QAAS/F,qBAAT,CACEgG,MADF,CAKElG,KALF,CAME,CACA,GAAIkG,MAAJ,CAAY,CACV,GAAI,MAAOA,OAAP,GAAkB,UAAtB,CAAkC,CAChCA,MAAM,CAAClG,KAAD,CAAN,CACD,CAFD,IAEO,CAEL,GACE,gBAAkBkG,OAAlB,EACA,MAAOA,OAAM,CAACC,YAAd,GAA+B,UAFjC,CAGE,CACA,GAAMC,QAAO,CAAGF,MAAM,CAACC,YAAP,EAAhB,CACAjG,oBAAoB,CAACkG,OAAD,CAAUpG,KAAV,CAApB,CACD,CAND,IAMO,CACL,GAAI,gBAAkBkG,OAAtB,CAA8B,CAC5B,GAAQG,YAAeH,MAAM,CAACI,YAA9B,CAAQD,WACR,GAAI/H,KAAK,CAACC,OAAN,CAAc8H,UAAd,CAAJ,CAA+B,CAC7B,gBAAoCA,WAAU,CAACE,OAAX,EAApC,CAA0D,sCAA9CC,MAAD,mDAASC,IAAD,cAAMC,MAAN,WACjB,GAAID,GAAG,GAAIzG,MAAK,CAACL,WAAjB,CAA8B,CAE5B,GAAMgH,YAAW,CAAG3G,KAAK,CAACL,WAAN,CAAkB8G,GAAlB,CAApB,CACA,GAAIC,KAAK,EAAIA,KAAK,CAACE,QAAnB,CAA6B,CAE3BF,KAAK,CAACE,QAAN,CAAeD,WAAf,EACD,CAHD,IAGO,CAELT,MAAM,CAACI,YAAP,CAAoBD,UAApB,CAA+BG,KAA/B,EAAwC,CAACC,GAAD,CAAME,WAAN,CAAxC,CACD,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CAGD,QAAS/D,aAAT,CAAsBpE,MAAtB,CAAwD,CACtD,GAAMmE,MAAK,kBAAQnE,OAAnB,CAGA,GAAI,WAAaA,OAAjB,CAAyB,CACvBmE,KAAK,CAACkE,OAAN,CAAgBrI,MAAM,CAACqI,OAAvB,CACAlE,KAAK,CAACmE,SAAN,CAAkBnE,KAAK,CAACkE,OAAN,CAAiBlE,KAAK,CAACkE,OAAzC,CACD,CACD,GAAI,eAAiBrI,OAArB,CAA6B,CAC3BmE,KAAK,CAACoE,WAAN,CAAoBvI,MAAM,CAACuI,WAA3B,CACApE,KAAK,CAACqE,aAAN,CAAsBrE,KAAK,CAACoE,WAAN,CAAqBpE,KAAK,CAACoE,WAAjD,CACD,CACD,GAAI,WAAavI,OAAjB,CAAyB,CACvBmE,KAAK,CAACsE,OAAN,CAAgBzI,MAAM,CAACyI,OAAvB,CACAtE,KAAK,CAACuE,SAAN,CAAkB1I,MAAM,CAACyI,OAAP,CAAkBzI,MAAM,CAACyI,OAA3C,CACD,CACD,GAAI,WAAazI,OAAjB,CAAyB,CACvBmE,KAAK,CAAClE,OAAN,CAAgB0I,OAAO,CAAC3I,MAAM,CAACC,OAAR,CAAP,CACb2I,GADa,CACT,mBAAG1D,mCACNzF,YAAW,CAACoJ,UAAZ,CAAuB3D,UAAvB,CAFY,IAIboC,MAJa,CAILwB,UAAD,QAAOA,EAJD,GAAhB,CAKD,CAND,IAMO,CACL3E,KAAK,CAAClE,OAAN,CAAgB,IAAhB,CACD,CAED,GAAM8I,YAAW,CAAG,CAClB,aADkB,CAElB,aAFkB,CAGlB,SAHkB,CAIlB,SAJkB,CAKlB,WALkB,CAMlB,eANkB,CAOlB,WAPkB,CAQlB,aARkB,CASlB,kBATkB,CAUlB,kBAVkB,CAWlB,gBAXkB,CAYlB,gBAZkB,CAalB,oBAbkB,CAclB,kBAdkB,CAelB,oBAfkB,CAgBlB,kBAhBkB,CAApB,CAkBAA,WAAW,CAACC,OAAZ,CAAqBC,aAAD,CAAsC,CACxD,GAAI,MAAO9E,MAAK,CAAC8E,IAAD,CAAZ,GAAuB,WAA3B,CAAwC,CACtC9E,KAAK,CAAC8E,IAAD,CAAL,CAAcC,MAAM,CAACC,GAArB,CACD,CACF,CAJD,EAKA,MAAOhF,MAAP,CACD,CAED,QAASwE,QAAT,CAAoBT,KAApB,CAAoC,CAElC,MAAOA,MAAK,EAAI,IAAT,CAAgB,EAAhB,CAAqBpI,KAAK,CAACC,OAAN,CAAcmI,KAAd,EAAuBA,KAAvB,CAA+B,CAACA,KAAD,CAA3D,CACD,CAED,cAAevI,eAAf","names":["Hammer","State","EventMap","NodeManager","gestureInstances","GestureHandler","constructor","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","id","clearSelfAsPending","hammer","stop","destroy","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","lastSentState","state","get","name","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","isGestureEnabledForEvent","getConfig","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","Error","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","updateHasCustomActivationCriteria","updateGestureConfig","props","ensureConfig","sync","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","cancelPendingGestures","Object","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","INPUT_CANCEL","isFinal","onRawEvent","isFirst","setView","findNodeHandle","Manager","NativeGestureClass","add","on","ev","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","entries","index","key","value","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","getHandler","v","configProps","forEach","prop","Number","NaN"],"sources":["GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"module"}
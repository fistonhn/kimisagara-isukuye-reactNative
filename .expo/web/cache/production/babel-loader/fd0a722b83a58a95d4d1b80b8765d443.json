{"ast":null,"code":"import{getHeaderTitle,HeaderBackContext}from'@react-navigation/elements';import{NavigationContext,NavigationRouteContext}from'@react-navigation/native';import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{forNoAnimation,forSlideLeft,forSlideRight,forSlideUp}from\"../../TransitionConfigs/HeaderStyleInterpolators\";import Header from\"./Header\";export default function HeaderContainer(_ref){var mode=_ref.mode,scenes=_ref.scenes,layout=_ref.layout,getPreviousScene=_ref.getPreviousScene,getFocusedRoute=_ref.getFocusedRoute,onContentHeightChange=_ref.onContentHeightChange,style=_ref.style;var focusedRoute=getFocusedRoute();var parentHeaderBack=React.useContext(HeaderBackContext);return React.createElement(Animated.View,{pointerEvents:\"box-none\",style:style},scenes.slice(-3).map(function(scene,i,self){var _self,_self2;if(mode==='screen'&&i!==self.length-1||!scene){return null;}var _scene$descriptor$opt=scene.descriptor.options,header=_scene$descriptor$opt.header,headerMode=_scene$descriptor$opt.headerMode,_scene$descriptor$opt2=_scene$descriptor$opt.headerShown,headerShown=_scene$descriptor$opt2===void 0?true:_scene$descriptor$opt2,headerTransparent=_scene$descriptor$opt.headerTransparent,headerStyleInterpolator=_scene$descriptor$opt.headerStyleInterpolator;if(headerMode!==mode||!headerShown){return null;}var isFocused=focusedRoute.key===scene.descriptor.route.key;var previousScene=getPreviousScene({route:scene.descriptor.route});var headerBack=parentHeaderBack;if(previousScene){var _previousScene$descri=previousScene.descriptor,options=_previousScene$descri.options,route=_previousScene$descri.route;headerBack=previousScene?{title:getHeaderTitle(options,route.name)}:parentHeaderBack;}var previousDescriptor=(_self=self[i-1])===null||_self===void 0?void 0:_self.descriptor;var nextDescriptor=(_self2=self[i+1])===null||_self2===void 0?void 0:_self2.descriptor;var _ref2=(previousDescriptor===null||previousDescriptor===void 0?void 0:previousDescriptor.options)||{},_ref2$headerShown=_ref2.headerShown,previousHeaderShown=_ref2$headerShown===void 0?true:_ref2$headerShown,previousHeaderMode=_ref2.headerMode;var nextHeaderlessScene=self.slice(i+1).find(function(scene){var _ref3=(scene===null||scene===void 0?void 0:scene.descriptor.options)||{},_ref3$headerShown=_ref3.headerShown,currentHeaderShown=_ref3$headerShown===void 0?true:_ref3$headerShown,currentHeaderMode=_ref3.headerMode;return currentHeaderShown===false||currentHeaderMode==='screen';});var _ref4=(nextHeaderlessScene===null||nextHeaderlessScene===void 0?void 0:nextHeaderlessScene.descriptor.options)||{},nextHeaderlessGestureDirection=_ref4.gestureDirection;var isHeaderStatic=(previousHeaderShown===false||previousHeaderMode==='screen')&&!nextDescriptor||nextHeaderlessScene;var props={layout:layout,back:headerBack,progress:scene.progress,options:scene.descriptor.options,route:scene.descriptor.route,navigation:scene.descriptor.navigation,styleInterpolator:mode==='float'?isHeaderStatic?nextHeaderlessGestureDirection==='vertical'||nextHeaderlessGestureDirection==='vertical-inverted'?forSlideUp:nextHeaderlessGestureDirection==='horizontal-inverted'?forSlideRight:forSlideLeft:headerStyleInterpolator:forNoAnimation};return React.createElement(NavigationContext.Provider,{key:scene.descriptor.route.key,value:scene.descriptor.navigation},React.createElement(NavigationRouteContext.Provider,{value:scene.descriptor.route},React.createElement(View,{onLayout:onContentHeightChange?function(e){var height=e.nativeEvent.layout.height;onContentHeightChange({route:scene.descriptor.route,height:height});}:undefined,pointerEvents:isFocused?'box-none':'none',accessibilityElementsHidden:!isFocused,importantForAccessibility:isFocused?'auto':'no-hide-descendants',style:mode==='float'&&!isFocused||headerTransparent?styles.header:null},header!==undefined?header(props):React.createElement(Header,props))));}));}var styles=StyleSheet.create({header:{position:'absolute',top:0,left:0,right:0}});","map":{"version":3,"mappings":"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","names":["getHeaderTitle","HeaderBackContext","NavigationContext","NavigationRouteContext","React","forNoAnimation","forSlideLeft","forSlideRight","forSlideUp","Header","HeaderContainer","mode","_ref","scenes","layout","getPreviousScene","getFocusedRoute","onContentHeightChange","style","focusedRoute","parentHeaderBack","useContext","Animated","View","pointerEvents","slice","map","scene","i","self","length","descriptor","options","header","headerMode","headerShown","headerTransparent","headerStyleInterpolator","isFocused","key","route","previousScene","headerBack","title","name","previousDescriptor","_self","nextDescriptor","_self2","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","find","currentHeaderShown","currentHeaderMode","nextHeaderlessGestureDirection","gestureDirection","isHeaderStatic","props","back","progress","navigation","styleInterpolator","Provider","value","onLayout","e","height","nativeEvent","undefined","accessibilityElementsHidden","importantForAccessibility","styles","StyleSheet","create","position","top","left","right"],"sources":["HeaderContainer.tsx"],"sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport {\n  forNoAnimation,\n  forSlideLeft,\n  forSlideRight,\n  forSlideUp,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderMode,\n  StackHeaderProps,\n  StackNavigationProp,\n} from '../../types';\nimport Header from './Header';\n\nexport type Props = {\n  mode: StackHeaderMode;\n  layout: Layout;\n  scenes: (Scene | undefined)[];\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerMode,\n          headerShown = true,\n          headerTransparent,\n          headerStyleInterpolator,\n        } = scene.descriptor.options;\n\n        if (headerMode !== mode || !headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.descriptor.route.key;\n        const previousScene = getPreviousScene({\n          route: scene.descriptor.route,\n        });\n\n        let headerBack = parentHeaderBack;\n\n        if (previousScene) {\n          const { options, route } = previousScene.descriptor;\n\n          headerBack = previousScene\n            ? { title: getHeaderTitle(options, route.name) }\n            : parentHeaderBack;\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousDescriptor = self[i - 1]?.descriptor;\n        const nextDescriptor = self[i + 1]?.descriptor;\n\n        const {\n          headerShown: previousHeaderShown = true,\n          headerMode: previousHeaderMode,\n        } = previousDescriptor?.options || {};\n\n        // If any of the next screens don't have a header or header is part of the screen\n        // Then we need to move this header offscreen so that it doesn't cover it\n        const nextHeaderlessScene = self.slice(i + 1).find((scene) => {\n          const {\n            headerShown: currentHeaderShown = true,\n            headerMode: currentHeaderMode,\n          } = scene?.descriptor.options || {};\n\n          return currentHeaderShown === false || currentHeaderMode === 'screen';\n        });\n\n        const { gestureDirection: nextHeaderlessGestureDirection } =\n          nextHeaderlessScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          ((previousHeaderShown === false || previousHeaderMode === 'screen') &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextDescriptor) ||\n          nextHeaderlessScene;\n\n        const props: StackHeaderProps = {\n          layout,\n          back: headerBack,\n          progress: scene.progress,\n          options: scene.descriptor.options,\n          route: scene.descriptor.route,\n          navigation: scene.descriptor\n            .navigation as StackNavigationProp<ParamListBase>,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? nextHeaderlessGestureDirection === 'vertical' ||\n                  nextHeaderlessGestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : nextHeaderlessGestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : headerStyleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.descriptor.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.descriptor.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.descriptor.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
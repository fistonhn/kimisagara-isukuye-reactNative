{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{findFocusedRoute,getActionFromState as getActionFromStateDefault,getPathFromState as getPathFromStateDefault,getStateFromPath as getStateFromPathDefault}from'@react-navigation/core';import isEqual from'fast-deep-equal';import*as React from'react';import createMemoryHistory from\"./createMemoryHistory\";import ServerContext from\"./ServerContext\";var findMatchingState=function findMatchingState(a,b){if(a===undefined||b===undefined||a.key!==b.key){return[undefined,undefined];}var aHistoryLength=a.history?a.history.length:a.routes.length;var bHistoryLength=b.history?b.history.length:b.routes.length;var aRoute=a.routes[a.index];var bRoute=b.routes[b.index];var aChildState=aRoute.state;var bChildState=bRoute.state;if(aHistoryLength!==bHistoryLength||aRoute.key!==bRoute.key||aChildState===undefined||bChildState===undefined||aChildState.key!==bChildState.key){return[a,b];}return findMatchingState(aChildState,bChildState);};var series=function series(cb){var handling=false;var queue=[];var callback=function(){var _ref2=_asyncToGenerator(function*(){try{if(handling){queue.unshift(callback);return;}handling=true;yield cb();}finally{handling=false;if(queue.length){var last=queue.pop();last===null||last===void 0?void 0:last();}}});return function callback(){return _ref2.apply(this,arguments);};}();return callback;};var linkingHandlers=[];export default function useLinking(ref,_ref){var independent=_ref.independent,_ref$enabled=_ref.enabled,enabled=_ref$enabled===void 0?true:_ref$enabled,config=_ref.config,_ref$getStateFromPath=_ref.getStateFromPath,getStateFromPath=_ref$getStateFromPath===void 0?getStateFromPathDefault:_ref$getStateFromPath,_ref$getPathFromState=_ref.getPathFromState,getPathFromState=_ref$getPathFromState===void 0?getPathFromStateDefault:_ref$getPathFromState,_ref$getActionFromSta=_ref.getActionFromState,getActionFromState=_ref$getActionFromSta===void 0?getActionFromStateDefault:_ref$getActionFromSta;React.useEffect(function(){if(process.env.NODE_ENV==='production'){return undefined;}if(independent){return undefined;}if(enabled!==false&&linkingHandlers.length){console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",'- Only a single instance of the root component is rendered'].join('\\n').trim());}var handler=Symbol();if(enabled!==false){linkingHandlers.push(handler);}return function(){var index=linkingHandlers.indexOf(handler);if(index>-1){linkingHandlers.splice(index,1);}};},[enabled,independent]);var _React$useState=React.useState(createMemoryHistory),_React$useState2=_slicedToArray(_React$useState,1),history=_React$useState2[0];var enabledRef=React.useRef(enabled);var configRef=React.useRef(config);var getStateFromPathRef=React.useRef(getStateFromPath);var getPathFromStateRef=React.useRef(getPathFromState);var getActionFromStateRef=React.useRef(getActionFromState);React.useEffect(function(){enabledRef.current=enabled;configRef.current=config;getStateFromPathRef.current=getStateFromPath;getPathFromStateRef.current=getPathFromState;getActionFromStateRef.current=getActionFromState;});var server=React.useContext(ServerContext);var getInitialState=React.useCallback(function(){var value;if(enabledRef.current){var _server$location;var _location=(_server$location=server===null||server===void 0?void 0:server.location)!==null&&_server$location!==void 0?_server$location:typeof window!=='undefined'?window.location:undefined;var path=_location?_location.pathname+_location.search:undefined;if(path){value=getStateFromPathRef.current(path,configRef.current);}}var thenable={then:function then(onfulfilled){return Promise.resolve(onfulfilled?onfulfilled(value):value);},catch:function _catch(){return thenable;}};return thenable;},[]);var previousIndexRef=React.useRef(undefined);var previousStateRef=React.useRef(undefined);var pendingPopStatePathRef=React.useRef(undefined);React.useEffect(function(){previousIndexRef.current=history.index;return history.listen(function(){var _previousIndexRef$cur;var navigation=ref.current;if(!navigation||!enabled){return;}var path=location.pathname+location.search;var index=history.index;var previousIndex=(_previousIndexRef$cur=previousIndexRef.current)!==null&&_previousIndexRef$cur!==void 0?_previousIndexRef$cur:0;previousIndexRef.current=index;pendingPopStatePathRef.current=path;var record=history.get(index);if((record===null||record===void 0?void 0:record.path)===path&&record!==null&&record!==void 0&&record.state){navigation.resetRoot(record.state);return;}var state=getStateFromPathRef.current(path,configRef.current);if(state){var rootState=navigation.getRootState();if(state.routes.some(function(r){return!(rootState!==null&&rootState!==void 0&&rootState.routeNames.includes(r.name));})){console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");return;}if(index>previousIndex){var action=getActionFromStateRef.current(state,configRef.current);if(action!==undefined){try{navigation.dispatch(action);}catch(e){console.warn(\"An error occurred when trying to handle the link '\"+path+\"': \"+(typeof e==='object'&&e!=null&&'message'in e?e.message:e));}}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}});},[enabled,history,ref]);React.useEffect(function(){var _ref$current;if(!enabled){return;}var getPathForRoute=function getPathForRoute(route,state){if(route!==null&&route!==void 0&&route.path){var stateForPath=getStateFromPathRef.current(route.path,configRef.current);if(stateForPath){var focusedRoute=findFocusedRoute(stateForPath);if(focusedRoute&&focusedRoute.name===route.name&&isEqual(focusedRoute.params,route.params)){return route.path;}}}return getPathFromStateRef.current(state,configRef.current);};if(ref.current){var state=ref.current.getRootState();if(state){var route=findFocusedRoute(state);var path=getPathForRoute(route,state);if(previousStateRef.current===undefined){previousStateRef.current=state;}history.replace({path:path,state:state});}}var onStateChange=function(){var _ref3=_asyncToGenerator(function*(){var navigation=ref.current;if(!navigation||!enabled){return;}var previousState=previousStateRef.current;var state=navigation.getRootState();if(!state){return;}var pendingPath=pendingPopStatePathRef.current;var route=findFocusedRoute(state);var path=getPathForRoute(route,state);previousStateRef.current=state;pendingPopStatePathRef.current=undefined;var _findMatchingState=findMatchingState(previousState,state),_findMatchingState2=_slicedToArray(_findMatchingState,2),previousFocusedState=_findMatchingState2[0],focusedState=_findMatchingState2[1];if(previousFocusedState&&focusedState&&path!==pendingPath){var historyDelta=(focusedState.history?focusedState.history.length:focusedState.routes.length)-(previousFocusedState.history?previousFocusedState.history.length:previousFocusedState.routes.length);if(historyDelta>0){history.push({path:path,state:state});}else if(historyDelta<0){var nextIndex=history.backIndex({path:path});var currentIndex=history.index;try{if(nextIndex!==-1&&nextIndex<currentIndex){yield history.go(nextIndex-currentIndex);}else{yield history.go(historyDelta);}history.replace({path:path,state:state});}catch(e){}}else{history.replace({path:path,state:state});}}else{history.replace({path:path,state:state});}});return function onStateChange(){return _ref3.apply(this,arguments);};}();return(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.addListener('state',series(onStateChange));});return{getInitialState:getInitialState};}","map":{"version":3,"mappings":"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","names":["findFocusedRoute","getActionFromState","getActionFromStateDefault","getPathFromState","getPathFromStateDefault","getStateFromPath","getStateFromPathDefault","isEqual","React","createMemoryHistory","ServerContext","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","handling","queue","callback","unshift","last","pop","linkingHandlers","useLinking","ref","independent","_ref","enabled","config","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","window","path","pathname","search","thenable","then","onfulfilled","Promise","resolve","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","navigation","previousIndex","record","get","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","getPathForRoute","route","stateForPath","focusedRoute","params","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","_ref$current","addListener"],"sources":["useLinking.tsx"],"sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
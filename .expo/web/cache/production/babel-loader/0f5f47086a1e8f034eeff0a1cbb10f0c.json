{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"style\",\"onPress\",\"onLongPress\",\"onPressIn\",\"onPressOut\",\"to\",\"accessibilityRole\"],_excluded2=[\"icon\",\"label\",\"labelStyle\",\"to\",\"focused\",\"allowFontScaling\",\"activeTintColor\",\"inactiveTintColor\",\"activeBackgroundColor\",\"inactiveBackgroundColor\",\"style\",\"onPress\",\"pressColor\",\"pressOpacity\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{PlatformPressable}from'@react-navigation/elements';import{Link,useTheme}from'@react-navigation/native';import Color from'color';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";var LinkPressable=function LinkPressable(_ref){var children=_ref.children,style=_ref.style,_onPress=_ref.onPress,onLongPress=_ref.onLongPress,onPressIn=_ref.onPressIn,onPressOut=_ref.onPressOut,to=_ref.to,accessibilityRole=_ref.accessibilityRole,rest=_objectWithoutProperties(_ref,_excluded);if(Platform.OS==='web'&&to){return React.createElement(Link,_extends({},rest,{to:to,style:[styles.button,style],onPress:function onPress(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)){e.preventDefault();_onPress===null||_onPress===void 0?void 0:_onPress(e);}},onLongPress:onLongPress!==null&&onLongPress!==void 0?onLongPress:undefined,onPressIn:onPressIn!==null&&onPressIn!==void 0?onPressIn:undefined,onPressOut:onPressOut!==null&&onPressOut!==void 0?onPressOut:undefined}),children);}else{return React.createElement(PlatformPressable,_extends({},rest,{accessibilityRole:accessibilityRole,onPress:_onPress}),React.createElement(View,{style:style},children));}};export default function DrawerItem(props){var _useTheme=useTheme(),colors=_useTheme.colors;var icon=props.icon,label=props.label,labelStyle=props.labelStyle,to=props.to,_props$focused=props.focused,focused=_props$focused===void 0?false:_props$focused,allowFontScaling=props.allowFontScaling,_props$activeTintColo=props.activeTintColor,activeTintColor=_props$activeTintColo===void 0?colors.primary:_props$activeTintColo,_props$inactiveTintCo=props.inactiveTintColor,inactiveTintColor=_props$inactiveTintCo===void 0?Color(colors.text).alpha(0.68).rgb().string():_props$inactiveTintCo,_props$activeBackgrou=props.activeBackgroundColor,activeBackgroundColor=_props$activeBackgrou===void 0?Color(activeTintColor).alpha(0.12).rgb().string():_props$activeBackgrou,_props$inactiveBackgr=props.inactiveBackgroundColor,inactiveBackgroundColor=_props$inactiveBackgr===void 0?'transparent':_props$inactiveBackgr,style=props.style,onPress=props.onPress,pressColor=props.pressColor,pressOpacity=props.pressOpacity,rest=_objectWithoutProperties(props,_excluded2);var _StyleSheet$flatten=StyleSheet.flatten(style||{}),_StyleSheet$flatten$b=_StyleSheet$flatten.borderRadius,borderRadius=_StyleSheet$flatten$b===void 0?4:_StyleSheet$flatten$b;var color=focused?activeTintColor:inactiveTintColor;var backgroundColor=focused?activeBackgroundColor:inactiveBackgroundColor;var iconNode=icon?icon({size:24,focused:focused,color:color}):null;return React.createElement(View,_extends({collapsable:false},rest,{style:[styles.container,{borderRadius:borderRadius,backgroundColor:backgroundColor},style]}),React.createElement(LinkPressable,{onPress:onPress,style:[styles.wrapper,{borderRadius:borderRadius}],accessibilityRole:\"button\",accessibilityState:{selected:focused},pressColor:pressColor,pressOpacity:pressOpacity,to:to},React.createElement(React.Fragment,null,iconNode,React.createElement(View,{style:[styles.label,{marginLeft:iconNode?32:0,marginVertical:5}]},typeof label==='string'?React.createElement(Text,{numberOfLines:1,allowFontScaling:allowFontScaling,style:[{color:color,fontWeight:'500'},labelStyle]},label):label({color:color,focused:focused})))));}var styles=StyleSheet.create({container:{marginHorizontal:10,marginVertical:4,overflow:'hidden'},wrapper:{flexDirection:'row',alignItems:'center',padding:8},label:{marginRight:32,flex:1},button:{display:'flex'}});","map":{"version":3,"mappings":"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","names":["PlatformPressable","Link","useTheme","Color","React","LinkPressable","_ref","children","style","onPress","onLongPress","onPressIn","onPressOut","to","accessibilityRole","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","View","DrawerItem","props","colors","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","StyleSheet","flatten","borderRadius","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityState","selected","Fragment","marginLeft","marginVertical","Text","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  onPressIn,\n  onPressOut,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        // types for PressableProps and TextProps are incompatible with each other by `null` so we\n        // can't use {...rest} for these 3 props\n        onLongPress={onLongPress ?? undefined}\n        onPressIn={onPressIn ?? undefined}\n        onPressOut={onPressOut ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
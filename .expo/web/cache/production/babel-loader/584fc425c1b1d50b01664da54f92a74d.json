{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{CommonActions,DrawerActions,useLinkBuilder}from'@react-navigation/native';import*as React from'react';import DrawerItem from\"./DrawerItem\";export default function DrawerItemList(_ref){var state=_ref.state,navigation=_ref.navigation,descriptors=_ref.descriptors;var buildLink=useLinkBuilder();var focusedRoute=state.routes[state.index];var focusedDescriptor=descriptors[focusedRoute.key];var focusedOptions=focusedDescriptor.options;var drawerActiveTintColor=focusedOptions.drawerActiveTintColor,drawerInactiveTintColor=focusedOptions.drawerInactiveTintColor,drawerActiveBackgroundColor=focusedOptions.drawerActiveBackgroundColor,drawerInactiveBackgroundColor=focusedOptions.drawerInactiveBackgroundColor;return state.routes.map(function(route,i){var focused=i===state.index;var onPress=function onPress(){var event=navigation.emit({type:'drawerItemPress',target:route.key,canPreventDefault:true});if(!event.defaultPrevented){navigation.dispatch(_objectSpread(_objectSpread({},focused?DrawerActions.closeDrawer():CommonActions.navigate({name:route.name,merge:true})),{},{target:state.key}));}};var _descriptors$route$ke=descriptors[route.key].options,title=_descriptors$route$ke.title,drawerLabel=_descriptors$route$ke.drawerLabel,drawerIcon=_descriptors$route$ke.drawerIcon,drawerLabelStyle=_descriptors$route$ke.drawerLabelStyle,drawerItemStyle=_descriptors$route$ke.drawerItemStyle,drawerAllowFontScaling=_descriptors$route$ke.drawerAllowFontScaling;return React.createElement(DrawerItem,{key:route.key,label:drawerLabel!==undefined?drawerLabel:title!==undefined?title:route.name,icon:drawerIcon,focused:focused,activeTintColor:drawerActiveTintColor,inactiveTintColor:drawerInactiveTintColor,activeBackgroundColor:drawerActiveBackgroundColor,inactiveBackgroundColor:drawerInactiveBackgroundColor,allowFontScaling:drawerAllowFontScaling,labelStyle:drawerLabelStyle,style:drawerItemStyle,to:buildLink(route.name,route.params),onPress:onPress});});}","map":{"version":3,"mappings":"w0BAAA,OACEA,aADF,CAEEC,aAFF,CAKEC,cALF,KAMO,0BANP,CAOA,MAAO,GAAKC,MAAZ,KAAuB,OAAvB,CAGA,MAAOC,WAAP,oBAWA,cAAe,SAASC,eAAT,MAIL,IAHRC,MADqC,CAI7BC,KAHRD,KADqC,CAErCE,UAFqC,CAI7BD,KAFRC,UAFqC,CAGrCC,YACQF,KADRE,YAEA,GAAMC,UAAS,CAAGR,cAAc,EAAhC,CAEA,GAAMS,aAAY,CAAGL,KAAK,CAACM,MAAN,CAAaN,KAAK,CAACO,KAAnB,CAArB,CACA,GAAMC,kBAAiB,CAAGL,WAAW,CAACE,YAAY,CAACI,GAAd,CAArC,CACA,GAAMC,eAAc,CAAGF,iBAAiB,CAACG,OAAzC,CAEA,GACEC,sBADI,CAKFF,cALJ,CACEE,qBADI,CAEJC,uBAFI,CAKFH,cALJ,CAEEG,uBAFI,CAGJC,2BAHI,CAKFJ,cALJ,CAGEI,2BAHI,CAIJC,8BACEL,cALJ,CAIEK,8BAGF,MAAOf,MAAK,CAACM,MAAN,CAAaU,GAAb,CAAiB,SAACC,KAAD,CAAQC,CAAR,CAAc,CACpC,GAAMC,QAAO,CAAGD,CAAC,GAAKlB,KAAK,CAACO,KAA5B,CAEA,GAAMa,QAAO,CAAG,QAAVA,QAAO,EAAS,CACpB,GAAMC,MAAK,CAAGnB,UAAU,CAACoB,IAAX,CAAgB,CAC5BC,IAAI,CAAE,iBADsB,CAE5BC,MAAM,CAAEP,KAAK,CAACR,GAFc,CAG5BgB,iBAAiB,CAAE,IAHS,CAAhB,CAAd,CAMA,GAAI,CAACJ,KAAK,CAACK,gBAAX,CAA6B,CAC3BxB,UAAU,CAACyB,QAAX,gCACMR,OAAO,CACPxB,aAAa,CAACiC,WAAd,EADO,CAEPlC,aAAa,CAACmC,QAAd,CAAuB,CAAEC,IAAI,CAAEb,KAAK,CAACa,IAAd,CAAoBC,KAAK,CAAE,IAA3B,CAAvB,CAFJ,MAGAP,MAAM,CAAExB,KAAK,CAACS,MAJhB,CAMD,CACF,CAfD,CAiBA,0BAOIN,WAAW,CAACc,KAAK,CAACR,GAAP,CAAX,CAAuBE,OAP3B,CACEqB,KADI,uBACJA,KADI,CAEJC,WAFI,uBAEJA,WAFI,CAGJC,UAHI,uBAGJA,UAHI,CAIJC,gBAJI,uBAIJA,gBAJI,CAKJC,eALI,uBAKJA,eALI,CAMJC,oEAGF,MACExC,qBAACC,UAAD,EACEW,GAAG,CAAEQ,KAAK,CAACR,GADb,CAEE6B,KAAK,CACHL,WAAW,GAAKM,SAAhB,CACIN,WADJ,CAEID,KAAK,GAAKO,SAAV,CACAP,KADA,CAEAf,KAAK,CAACa,IAPd,CASEU,IAAI,CAAEN,UATR,CAUEf,OAAO,CAAEA,OAVX,CAWEsB,eAAe,CAAE7B,qBAXnB,CAYE8B,iBAAiB,CAAE7B,uBAZrB,CAaE8B,qBAAqB,CAAE7B,2BAbzB,CAcE8B,uBAAuB,CAAE7B,6BAd3B,CAeE8B,gBAAgB,CAAER,sBAfpB,CAgBES,UAAU,CAAEX,gBAhBd,CAiBEY,KAAK,CAAEX,eAjBT,CAkBEY,EAAE,CAAE5C,SAAS,CAACa,KAAK,CAACa,IAAP,CAAab,KAAK,CAACgC,MAAnB,CAlBf,CAmBE7B,OAAO,CAAEA,OAnBX,EADF,CAuBD,CApDM,CAAP,CAqDD","names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","state","_ref","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","closeDrawer","navigate","name","merge","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","label","undefined","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","allowFontScaling","labelStyle","style","to","params"],"sources":["DrawerItemList.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate({ name: route.name, merge: true })),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}